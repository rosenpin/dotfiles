#!/bin/bash

alias send-files='rsync --delete-after --delete-excluded --progress -zr'

disk-usage(){
    du -hs $@ | sort -h
}

replace-all() {
    echo $(grep -nrI $2)
    find . -type f -name "*.$1" -exec sed -i "s/$2/$3/g" {} \;
    echo $(grep -nrI $3)
}

alias ssh-rosenpin="ssh $WEBSITE"

deploy-rosenpin.io() {
    website_project_path="$GOSRC/gitlab.com/rosenpin/rosenpin.io"
    echo "killing server.."
    container_id=$(ssh-rosenpin "docker ps | grep rosenpin.io | cut -d' ' -f1")
	echo $container_id
    ssh-rosenpin "docker stop $container_id"
    echo "building docker image.."
    (cd $website_project_path && ./build | return 1) 
    echo "pushing files.."
    send-rosenpin.io $website_project_path/rosenpin.tar.gz rosenpin.tar.gz 
    echo "pushing configs.."
    send-rosenpin.io $website_project_path/configs . 
    echo "pushing resources.."
    send-rosenpin.io $website_project_path/resources . 
    echo "running server.."
    ssh-rosenpin "run-website"
    echo "Done!"
}

terminal-name() {
    ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))"
}

send-rosenpin.io() {
    if [ -z $1 ] | [ -z $2 ]; then
        echo "must specify source and dest files"
        return
    fi

    send-files $1 $WEBSITE:~/$2
}

open-in(){
    f=$(echo $1|cut -d":" -f1)
    l=$(echo $1|cut -d":" -f2)
    bat --color=always $f
}

# find file by content and open it
fag() {
  local file

  file="$(ag --hidden --nobreak --noheading $@ | fzf --height=40 -0 -1 --preview="open-in {}" --preview-window=60%)"

  if [[ -n $file ]]
  then
     vim $file
  fi
}

# fco_preview - checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
fco_preview() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi --preview="git --no-pager log -150 --pretty=format:%s '..{2}'") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

alias gco=""
unalias gco
gco() {
    if [[ -z $1 ]]; then
        fco_preview
    else
        git checkout $@
    fi
}

# fshow - git commit browser
gshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# Improved z
unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}

# Select a docker container to start and attach to
da() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -1 -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker start "$cid" && docker attach "$cid"
}

# Select a running docker container to stop
ds() {
  local cid
  cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker stop "$cid"
}
